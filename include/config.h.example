#ifndef CONFIG_H
#define CONFIG_H

#include <Arduino.h>

// Configuration settings
#define LED_PIN 8
#define NUM_LEDS 24
#define ROWS 4
#define COLS 6

// Pin definitions
const int rowPins[ROWS] = {21, 20, 3, 7};
const int colPins[COLS] = {0, 1, 10, 4, 5, 6};

#define DEBOUNCE_TIME 50 // milliseconds
#define LONG_PRESS_TIME 1000 // milliseconds

// Night mode configuration
#define NIGHT_START_HOUR 22  // 10 PM
#define NIGHT_END_HOUR 8     // 8 AM
#define NIGHT_BRIGHTNESS_SCALE 0.1f


// Special Up button for brightness control (coordinates 2,0)
#define UP_BUTTON_X 2
#define UP_BUTTON_Y 0
// Special Down button for brightness control (coordinates 1,0)
#define DOWN_BUTTON_X 1
#define DOWN_BUTTON_Y 0


#define BRIGHTNESS_STEP 10 // Smaller step for continuous adjustment
const unsigned long BRIGHTNESS_ADJUST_INTERVAL = 100; // milliseconds

// Constants for animations
const int ANIMATION_DELAY_SHORT = 50;
const int ANIMATION_DELAY_MEDIUM = 100;
const int ANIMATION_REPEAT_COUNT = 3;
const float ANIMATION_BRIGHTNESS_SCALAR = 0.07f; // Adjust this value to change overall brightness

// JSON buffer size
const size_t JSON_BUFFER_SIZE = 16384; // 16KB Anything less leads to esp to crash when first connecting to WS

// Color definitions
#define COLOR_BLUE    0x0000FF
#define COLOR_GREEN   0x00FF00
#define COLOR_CYAN    0x00FFFF
#define COLOR_YELLOW  0xFFFF00
#define COLOR_RED     0xFF0000
#define COLOR_ORANGE  0xFFA500

// Entity mapping structure
struct EntityMapping {
    const char* entity_id;
    int x;
    int y;
    bool is_switch;
    uint8_t default_r;
    uint8_t default_g;
    uint8_t default_b;
    uint8_t default_brightness;
};

// If you set is_switch=True, it will simply use the passed color and brightness, if you set to false, will follow light color and brightness of the entity if exists!
const EntityMapping entityMappings[] = {
    {"switch.example", 0, 0, true, 255, 255, 255, 255},  // Example switch
    {"light.example", 0, 1, false, 255, 255, 255, 255},  // Example light
    {"light.example", 0, 2, false, 255, 255, 255, 255},  // Example light
    {"light.example", 0, 3, false, 255, 255, 255, 255},  // Example light

    // 1,0 is reserved for brightness decrease modifier
    {"light.example", 1, 1, false, 255, 255, 255, 255},  // Example light
    {"light.example", 1, 2, false, 255, 255, 255, 255},  // Example light
    {"light.example", 1, 3, false, 255, 255, 255, 255},  // Example light

    // 2,0 is reserved for brightness increase modifier
    {"switch.example", 2, 1, true, 255, 255, 255, 255},  // Example switch
    {"switch.example", 2, 2, true, 255, 255, 255, 255},  // Example switch
    {"switch.example", 2, 3, true, 255, 255, 255, 255},  // Example switch

    {"light.example", 3, 0, false, 255, 255, 255, 255},  // Example light
    {"light.example", 3, 1, false, 255, 255, 255, 255},  // Example light
    {"light.example", 3, 2, false, 255, 255, 255, 255},  // Example light
    {"light.example", 3, 3, false, 255, 255, 255, 255},  // Example light

    {"switch.example", 4, 0, true, 255, 255, 255, 255},  // Example switch
    {"light.example", 4, 1, false, 255, 255, 255, 255},  // Example light
    {"light.example", 4, 2, false, 255, 255, 255, 255},  // Example light
    {"switch.example", 4, 3, true, 255, 255, 255, 255},  // Example switch

    {"switch.example", 5, 0, true, 255, 255, 255, 255},  // Example switch
    {"switch.example", 5, 1, true, 255, 255, 255, 255},  // Example switch
    {"switch.example", 5, 2, true, 255, 255, 255, 255},  // Example switch
    {"switch.example", 5, 3, true, 255, 255, 255, 255},  // Example switch
};


const int NUM_MAPPINGS = sizeof(entityMappings) / sizeof(entityMappings[0]);

#endif // CONFIG_H